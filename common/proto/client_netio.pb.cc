// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_netio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_netio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client_netio_protocol {

namespace {

const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableDomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableDomData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fnetio_2eproto() {
  protobuf_AddDesc_client_5fnetio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_netio.proto");
  GOOGLE_CHECK(file != NULL);
  ClientRequest_descriptor_ = file->message_type(0);
  static const int ClientRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, req_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, m_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, m_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, clv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, login_time_),
  };
  ClientRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClientRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _internal_metadata_),
      -1);
  ClientResponse_descriptor_ = file->message_type(1);
  static const int ClientResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, fresh_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, svr_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, game_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, cost_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, table_dom_data_),
  };
  ClientResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientResponse_descriptor_,
      ClientResponse::default_instance_,
      ClientResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClientResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _internal_metadata_),
      -1);
  TableDomData_descriptor_ = file->message_type(2);
  static const int TableDomData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, updt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, seq_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, dom_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, dom_data_),
  };
  TableDomData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableDomData_descriptor_,
      TableDomData::default_instance_,
      TableDomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableDomData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDomData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fnetio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientResponse_descriptor_, &ClientResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableDomData_descriptor_, &TableDomData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fnetio_2eproto() {
  delete ClientRequest::default_instance_;
  delete ClientRequest_reflection_;
  delete ClientResponse::default_instance_;
  delete ClientResponse_reflection_;
  delete TableDomData::default_instance_;
  delete TableDomData_reflection_;
}

void protobuf_AddDesc_client_5fnetio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client_netio.proto\022\025client_netio_proto"
    "col\"\342\001\n\rClientRequest\022\024\n\014service_type\030\001 "
    "\002(\005\022\013\n\003seq\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\022\013\n\003uid\030\004 "
    "\002(\r\022\013\n\003sid\030\005 \002(\005\022\013\n\003aid\030\006 \002(\005\022\017\n\007req_url"
    "\030\007 \001(\014\022\017\n\007m_scene\030\010 \001(\005\022\r\n\005m_sid\030\t \001(\005\022\r"
    "\n\005m_pos\030\n \001(\005\022\013\n\003cid\030\013 \001(\005\022\013\n\003clv\030\014 \001(\005\022"
    "\013\n\003did\030\r \001(\t\022\022\n\nlogin_time\030\016 \001(\003\"\347\001\n\016Cli"
    "entResponse\022\024\n\014service_type\030\001 \002(\005\022\020\n\010ret"
    "_code\030\002 \002(\005\022\022\n\nfresh_code\030\003 \002(\005\022\013\n\003seq\030\004"
    " \002(\r\022\017\n\007svr_seq\030\005 \002(\r\022\021\n\tgame_time\030\006 \002(\r"
    "\022\021\n\tcost_time\030\007 \002(\r\022\013\n\003uid\030\010 \002(\r\022\013\n\003sid\030"
    "\t \002(\005\022;\n\016table_dom_data\030\n \003(\0132#.client_n"
    "etio_protocol.TableDomData\"x\n\014TableDomDa"
    "ta\022\022\n\ntable_name\030\001 \002(\t\022\021\n\tupdt_type\030\002 \002("
    "\005\022\020\n\010seq_type\030\003 \002(\005\022\020\n\010dom_type\030\004 \002(\005\022\013\n"
    "\003seq\030\005 \002(\003\022\020\n\010dom_data\030\006 \002(\014", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_netio.proto", &protobuf_RegisterTypes);
  ClientRequest::default_instance_ = new ClientRequest();
  ClientResponse::default_instance_ = new ClientResponse();
  TableDomData::default_instance_ = new TableDomData();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientResponse::default_instance_->InitAsDefaultInstance();
  TableDomData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fnetio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fnetio_2eproto {
  StaticDescriptorInitializer_client_5fnetio_2eproto() {
    protobuf_AddDesc_client_5fnetio_2eproto();
  }
} static_descriptor_initializer_client_5fnetio_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRequest::kServiceTypeFieldNumber;
const int ClientRequest::kSeqFieldNumber;
const int ClientRequest::kTimeFieldNumber;
const int ClientRequest::kUidFieldNumber;
const int ClientRequest::kSidFieldNumber;
const int ClientRequest::kAidFieldNumber;
const int ClientRequest::kReqUrlFieldNumber;
const int ClientRequest::kMSceneFieldNumber;
const int ClientRequest::kMSidFieldNumber;
const int ClientRequest::kMPosFieldNumber;
const int ClientRequest::kCidFieldNumber;
const int ClientRequest::kClvFieldNumber;
const int ClientRequest::kDidFieldNumber;
const int ClientRequest::kLoginTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRequest::ClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_netio_protocol.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_netio_protocol.ClientRequest)
}

void ClientRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_type_ = 0;
  seq_ = 0u;
  time_ = 0u;
  uid_ = 0u;
  sid_ = 0;
  aid_ = 0;
  req_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_scene_ = 0;
  m_sid_ = 0;
  m_pos_ = 0;
  cid_ = 0;
  clv_ = 0;
  did_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:client_netio_protocol.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  req_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  did_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fnetio_2eproto();
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New(::google::protobuf::Arena* arena) const {
  ClientRequest* n = new ClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:client_netio_protocol.ClientRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClientRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(service_type_, aid_);
    if (has_req_url()) {
      req_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    m_scene_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(m_sid_, cid_);
    ZR_(login_time_, clv_);
    if (has_did()) {
      did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_netio_protocol.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 service_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // required uint32 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sid;
        break;
      }

      // required int32 sid = 5;
      case 5: {
        if (tag == 40) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_aid;
        break;
      }

      // required int32 aid = 6;
      case 6: {
        if (tag == 48) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_req_url;
        break;
      }

      // optional bytes req_url = 7;
      case 7: {
        if (tag == 58) {
         parse_req_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_scene;
        break;
      }

      // optional int32 m_scene = 8;
      case 8: {
        if (tag == 64) {
         parse_m_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scene_)));
          set_has_m_scene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_sid;
        break;
      }

      // optional int32 m_sid = 9;
      case 9: {
        if (tag == 72) {
         parse_m_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sid_)));
          set_has_m_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_pos;
        break;
      }

      // optional int32 m_pos = 10;
      case 10: {
        if (tag == 80) {
         parse_m_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pos_)));
          set_has_m_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cid;
        break;
      }

      // optional int32 cid = 11;
      case 11: {
        if (tag == 88) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_clv;
        break;
      }

      // optional int32 clv = 12;
      case 12: {
        if (tag == 96) {
         parse_clv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clv_)));
          set_has_clv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_did;
        break;
      }

      // optional string did = 13;
      case 13: {
        if (tag == 106) {
         parse_did:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_netio_protocol.ClientRequest.did");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_login_time;
        break;
      }

      // optional int64 login_time = 14;
      case 14: {
        if (tag == 112) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_netio_protocol.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_netio_protocol.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_netio_protocol.ClientRequest)
  // required int32 service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_type(), output);
  }

  // required uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }

  // required int32 sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sid(), output);
  }

  // required int32 aid = 6;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->aid(), output);
  }

  // optional bytes req_url = 7;
  if (has_req_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->req_url(), output);
  }

  // optional int32 m_scene = 8;
  if (has_m_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_scene(), output);
  }

  // optional int32 m_sid = 9;
  if (has_m_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_sid(), output);
  }

  // optional int32 m_pos = 10;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_pos(), output);
  }

  // optional int32 cid = 11;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cid(), output);
  }

  // optional int32 clv = 12;
  if (has_clv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->clv(), output);
  }

  // optional string did = 13;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_netio_protocol.ClientRequest.did");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->did(), output);
  }

  // optional int64 login_time = 14;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->login_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_netio_protocol.ClientRequest)
}

::google::protobuf::uint8* ClientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_netio_protocol.ClientRequest)
  // required int32 service_type = 1;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_type(), target);
  }

  // required uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }

  // required int32 sid = 5;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sid(), target);
  }

  // required int32 aid = 6;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->aid(), target);
  }

  // optional bytes req_url = 7;
  if (has_req_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->req_url(), target);
  }

  // optional int32 m_scene = 8;
  if (has_m_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_scene(), target);
  }

  // optional int32 m_sid = 9;
  if (has_m_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_sid(), target);
  }

  // optional int32 m_pos = 10;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_pos(), target);
  }

  // optional int32 cid = 11;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cid(), target);
  }

  // optional int32 clv = 12;
  if (has_clv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->clv(), target);
  }

  // optional string did = 13;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_netio_protocol.ClientRequest.did");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->did(), target);
  }

  // optional int64 login_time = 14;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->login_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_netio_protocol.ClientRequest)
  return target;
}

int ClientRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:client_netio_protocol.ClientRequest)
  int total_size = 0;

  if (has_service_type()) {
    // required int32 service_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_type());
  }

  if (has_seq()) {
    // required uint32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  if (has_time()) {
    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_uid()) {
    // required uint32 uid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_sid()) {
    // required int32 sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  if (has_aid()) {
    // required int32 aid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aid());
  }

  return total_size;
}
int ClientRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:client_netio_protocol.ClientRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 service_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_type());

    // required uint32 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());

    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 uid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required int32 sid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());

    // required int32 aid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional bytes req_url = 7;
    if (has_req_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_url());
    }

    // optional int32 m_scene = 8;
    if (has_m_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scene());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 m_sid = 9;
    if (has_m_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sid());
    }

    // optional int32 m_pos = 10;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pos());
    }

    // optional int32 cid = 11;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional int32 clv = 12;
    if (has_clv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clv());
    }

    // optional string did = 13;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // optional int64 login_time = 14;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_netio_protocol.ClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_netio_protocol.ClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client_netio_protocol.ClientRequest)
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_netio_protocol.ClientRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_req_url()) {
      set_has_req_url();
      req_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_url_);
    }
    if (from.has_m_scene()) {
      set_m_scene(from.m_scene());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_sid()) {
      set_m_sid(from.m_sid());
    }
    if (from.has_m_pos()) {
      set_m_pos(from.m_pos());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_clv()) {
      set_clv(from.clv());
    }
    if (from.has_did()) {
      set_has_did();
      did_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.did_);
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_netio_protocol.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_netio_protocol.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRequest::InternalSwap(ClientRequest* other) {
  std::swap(service_type_, other->service_type_);
  std::swap(seq_, other->seq_);
  std::swap(time_, other->time_);
  std::swap(uid_, other->uid_);
  std::swap(sid_, other->sid_);
  std::swap(aid_, other->aid_);
  req_url_.Swap(&other->req_url_);
  std::swap(m_scene_, other->m_scene_);
  std::swap(m_sid_, other->m_sid_);
  std::swap(m_pos_, other->m_pos_);
  std::swap(cid_, other->cid_);
  std::swap(clv_, other->clv_);
  did_.Swap(&other->did_);
  std::swap(login_time_, other->login_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// required int32 service_type = 1;
bool ClientRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientRequest::clear_service_type() {
  service_type_ = 0;
  clear_has_service_type();
}
 ::google::protobuf::int32 ClientRequest::service_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.service_type)
  return service_type_;
}
 void ClientRequest::set_service_type(::google::protobuf::int32 value) {
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.service_type)
}

// required uint32 seq = 2;
bool ClientRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientRequest::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
 ::google::protobuf::uint32 ClientRequest::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.seq)
  return seq_;
}
 void ClientRequest::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.seq)
}

// required uint32 time = 3;
bool ClientRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 ClientRequest::time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.time)
  return time_;
}
 void ClientRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.time)
}

// required uint32 uid = 4;
bool ClientRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 ClientRequest::uid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.uid)
  return uid_;
}
 void ClientRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.uid)
}

// required int32 sid = 5;
bool ClientRequest::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientRequest::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientRequest::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientRequest::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
 ::google::protobuf::int32 ClientRequest::sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.sid)
  return sid_;
}
 void ClientRequest::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.sid)
}

// required int32 aid = 6;
bool ClientRequest::has_aid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientRequest::set_has_aid() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientRequest::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
 ::google::protobuf::int32 ClientRequest::aid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.aid)
  return aid_;
}
 void ClientRequest::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.aid)
}

// optional bytes req_url = 7;
bool ClientRequest::has_req_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientRequest::set_has_req_url() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientRequest::clear_has_req_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientRequest::clear_req_url() {
  req_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_url();
}
 const ::std::string& ClientRequest::req_url() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.req_url)
  return req_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_req_url(const ::std::string& value) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.req_url)
}
 void ClientRequest::set_req_url(const char* value) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.ClientRequest.req_url)
}
 void ClientRequest::set_req_url(const void* value, size_t size) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.ClientRequest.req_url)
}
 ::std::string* ClientRequest::mutable_req_url() {
  set_has_req_url();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientRequest.req_url)
  return req_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientRequest::release_req_url() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.ClientRequest.req_url)
  clear_has_req_url();
  return req_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_allocated_req_url(::std::string* req_url) {
  if (req_url != NULL) {
    set_has_req_url();
  } else {
    clear_has_req_url();
  }
  req_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_url);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.ClientRequest.req_url)
}

// optional int32 m_scene = 8;
bool ClientRequest::has_m_scene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientRequest::set_has_m_scene() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientRequest::clear_has_m_scene() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientRequest::clear_m_scene() {
  m_scene_ = 0;
  clear_has_m_scene();
}
 ::google::protobuf::int32 ClientRequest::m_scene() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_scene)
  return m_scene_;
}
 void ClientRequest::set_m_scene(::google::protobuf::int32 value) {
  set_has_m_scene();
  m_scene_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_scene)
}

// optional int32 m_sid = 9;
bool ClientRequest::has_m_sid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClientRequest::set_has_m_sid() {
  _has_bits_[0] |= 0x00000100u;
}
void ClientRequest::clear_has_m_sid() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClientRequest::clear_m_sid() {
  m_sid_ = 0;
  clear_has_m_sid();
}
 ::google::protobuf::int32 ClientRequest::m_sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_sid)
  return m_sid_;
}
 void ClientRequest::set_m_sid(::google::protobuf::int32 value) {
  set_has_m_sid();
  m_sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_sid)
}

// optional int32 m_pos = 10;
bool ClientRequest::has_m_pos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ClientRequest::set_has_m_pos() {
  _has_bits_[0] |= 0x00000200u;
}
void ClientRequest::clear_has_m_pos() {
  _has_bits_[0] &= ~0x00000200u;
}
void ClientRequest::clear_m_pos() {
  m_pos_ = 0;
  clear_has_m_pos();
}
 ::google::protobuf::int32 ClientRequest::m_pos() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_pos)
  return m_pos_;
}
 void ClientRequest::set_m_pos(::google::protobuf::int32 value) {
  set_has_m_pos();
  m_pos_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_pos)
}

// optional int32 cid = 11;
bool ClientRequest::has_cid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ClientRequest::set_has_cid() {
  _has_bits_[0] |= 0x00000400u;
}
void ClientRequest::clear_has_cid() {
  _has_bits_[0] &= ~0x00000400u;
}
void ClientRequest::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 ClientRequest::cid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.cid)
  return cid_;
}
 void ClientRequest::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.cid)
}

// optional int32 clv = 12;
bool ClientRequest::has_clv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ClientRequest::set_has_clv() {
  _has_bits_[0] |= 0x00000800u;
}
void ClientRequest::clear_has_clv() {
  _has_bits_[0] &= ~0x00000800u;
}
void ClientRequest::clear_clv() {
  clv_ = 0;
  clear_has_clv();
}
 ::google::protobuf::int32 ClientRequest::clv() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.clv)
  return clv_;
}
 void ClientRequest::set_clv(::google::protobuf::int32 value) {
  set_has_clv();
  clv_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.clv)
}

// optional string did = 13;
bool ClientRequest::has_did() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ClientRequest::set_has_did() {
  _has_bits_[0] |= 0x00001000u;
}
void ClientRequest::clear_has_did() {
  _has_bits_[0] &= ~0x00001000u;
}
void ClientRequest::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_did();
}
 const ::std::string& ClientRequest::did() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.did)
  return did_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_did(const ::std::string& value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.did)
}
 void ClientRequest::set_did(const char* value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.ClientRequest.did)
}
 void ClientRequest::set_did(const char* value, size_t size) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.ClientRequest.did)
}
 ::std::string* ClientRequest::mutable_did() {
  set_has_did();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientRequest.did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientRequest::release_did() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.ClientRequest.did)
  clear_has_did();
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    set_has_did();
  } else {
    clear_has_did();
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.ClientRequest.did)
}

// optional int64 login_time = 14;
bool ClientRequest::has_login_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ClientRequest::set_has_login_time() {
  _has_bits_[0] |= 0x00002000u;
}
void ClientRequest::clear_has_login_time() {
  _has_bits_[0] &= ~0x00002000u;
}
void ClientRequest::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
  clear_has_login_time();
}
 ::google::protobuf::int64 ClientRequest::login_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.login_time)
  return login_time_;
}
 void ClientRequest::set_login_time(::google::protobuf::int64 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.login_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientResponse::kServiceTypeFieldNumber;
const int ClientResponse::kRetCodeFieldNumber;
const int ClientResponse::kFreshCodeFieldNumber;
const int ClientResponse::kSeqFieldNumber;
const int ClientResponse::kSvrSeqFieldNumber;
const int ClientResponse::kGameTimeFieldNumber;
const int ClientResponse::kCostTimeFieldNumber;
const int ClientResponse::kUidFieldNumber;
const int ClientResponse::kSidFieldNumber;
const int ClientResponse::kTableDomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientResponse::ClientResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_netio_protocol.ClientResponse)
}

void ClientResponse::InitAsDefaultInstance() {
}

ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_netio_protocol.ClientResponse)
}

void ClientResponse::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = 0;
  ret_code_ = 0;
  fresh_code_ = 0;
  seq_ = 0u;
  svr_seq_ = 0u;
  game_time_ = 0u;
  cost_time_ = 0u;
  uid_ = 0u;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResponse::~ClientResponse() {
  // @@protoc_insertion_point(destructor:client_netio_protocol.ClientResponse)
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResponse_descriptor_;
}

const ClientResponse& ClientResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fnetio_2eproto();
  return *default_instance_;
}

ClientResponse* ClientResponse::default_instance_ = NULL;

ClientResponse* ClientResponse::New(::google::protobuf::Arena* arena) const {
  ClientResponse* n = new ClientResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:client_netio_protocol.ClientResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClientResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(service_type_, uid_);
  }
  sid_ = 0;

#undef ZR_HELPER_
#undef ZR_

  table_dom_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_netio_protocol.ClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 service_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // required int32 ret_code = 2;
      case 2: {
        if (tag == 16) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fresh_code;
        break;
      }

      // required int32 fresh_code = 3;
      case 3: {
        if (tag == 24) {
         parse_fresh_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fresh_code_)));
          set_has_fresh_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // required uint32 seq = 4;
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_svr_seq;
        break;
      }

      // required uint32 svr_seq = 5;
      case 5: {
        if (tag == 40) {
         parse_svr_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_seq_)));
          set_has_svr_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_game_time;
        break;
      }

      // required uint32 game_time = 6;
      case 6: {
        if (tag == 48) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cost_time;
        break;
      }

      // required uint32 cost_time = 7;
      case 7: {
        if (tag == 56) {
         parse_cost_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_time_)));
          set_has_cost_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_uid;
        break;
      }

      // required uint32 uid = 8;
      case 8: {
        if (tag == 64) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sid;
        break;
      }

      // required int32 sid = 9;
      case 9: {
        if (tag == 72) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_table_dom_data;
        break;
      }

      // repeated .client_netio_protocol.TableDomData table_dom_data = 10;
      case 10: {
        if (tag == 82) {
         parse_table_dom_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table_dom_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_table_dom_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_table_dom_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_netio_protocol.ClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_netio_protocol.ClientResponse)
  return false;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_netio_protocol.ClientResponse)
  // required int32 service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service_type(), output);
  }

  // required int32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  // required int32 fresh_code = 3;
  if (has_fresh_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fresh_code(), output);
  }

  // required uint32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }

  // required uint32 svr_seq = 5;
  if (has_svr_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->svr_seq(), output);
  }

  // required uint32 game_time = 6;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_time(), output);
  }

  // required uint32 cost_time = 7;
  if (has_cost_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cost_time(), output);
  }

  // required uint32 uid = 8;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uid(), output);
  }

  // required int32 sid = 9;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sid(), output);
  }

  // repeated .client_netio_protocol.TableDomData table_dom_data = 10;
  for (unsigned int i = 0, n = this->table_dom_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->table_dom_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_netio_protocol.ClientResponse)
}

::google::protobuf::uint8* ClientResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_netio_protocol.ClientResponse)
  // required int32 service_type = 1;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service_type(), target);
  }

  // required int32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  // required int32 fresh_code = 3;
  if (has_fresh_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fresh_code(), target);
  }

  // required uint32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }

  // required uint32 svr_seq = 5;
  if (has_svr_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->svr_seq(), target);
  }

  // required uint32 game_time = 6;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_time(), target);
  }

  // required uint32 cost_time = 7;
  if (has_cost_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cost_time(), target);
  }

  // required uint32 uid = 8;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uid(), target);
  }

  // required int32 sid = 9;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sid(), target);
  }

  // repeated .client_netio_protocol.TableDomData table_dom_data = 10;
  for (unsigned int i = 0, n = this->table_dom_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->table_dom_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_netio_protocol.ClientResponse)
  return target;
}

int ClientResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:client_netio_protocol.ClientResponse)
  int total_size = 0;

  if (has_service_type()) {
    // required int32 service_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_type());
  }

  if (has_ret_code()) {
    // required int32 ret_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  if (has_fresh_code()) {
    // required int32 fresh_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fresh_code());
  }

  if (has_seq()) {
    // required uint32 seq = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  if (has_svr_seq()) {
    // required uint32 svr_seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svr_seq());
  }

  if (has_game_time()) {
    // required uint32 game_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_time());
  }

  if (has_cost_time()) {
    // required uint32 cost_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_time());
  }

  if (has_uid()) {
    // required uint32 uid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_sid()) {
    // required int32 sid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  return total_size;
}
int ClientResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:client_netio_protocol.ClientResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required int32 service_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_type());

    // required int32 ret_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());

    // required int32 fresh_code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fresh_code());

    // required uint32 seq = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());

    // required uint32 svr_seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svr_seq());

    // required uint32 game_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_time());

    // required uint32 cost_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_time());

    // required uint32 uid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required int32 sid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .client_netio_protocol.TableDomData table_dom_data = 10;
  total_size += 1 * this->table_dom_data_size();
  for (int i = 0; i < this->table_dom_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_dom_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_netio_protocol.ClientResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_netio_protocol.ClientResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client_netio_protocol.ClientResponse)
    MergeFrom(*source);
  }
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_netio_protocol.ClientResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  table_dom_data_.MergeFrom(from.table_dom_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_fresh_code()) {
      set_fresh_code(from.fresh_code());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_svr_seq()) {
      set_svr_seq(from.svr_seq());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
    if (from.has_cost_time()) {
      set_cost_time(from.cost_time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_netio_protocol.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_netio_protocol.ClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->table_dom_data())) return false;
  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientResponse::InternalSwap(ClientResponse* other) {
  std::swap(service_type_, other->service_type_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(fresh_code_, other->fresh_code_);
  std::swap(seq_, other->seq_);
  std::swap(svr_seq_, other->svr_seq_);
  std::swap(game_time_, other->game_time_);
  std::swap(cost_time_, other->cost_time_);
  std::swap(uid_, other->uid_);
  std::swap(sid_, other->sid_);
  table_dom_data_.UnsafeArenaSwap(&other->table_dom_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResponse_descriptor_;
  metadata.reflection = ClientResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientResponse

// required int32 service_type = 1;
bool ClientResponse::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientResponse::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientResponse::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientResponse::clear_service_type() {
  service_type_ = 0;
  clear_has_service_type();
}
 ::google::protobuf::int32 ClientResponse::service_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.service_type)
  return service_type_;
}
 void ClientResponse::set_service_type(::google::protobuf::int32 value) {
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.service_type)
}

// required int32 ret_code = 2;
bool ClientResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
 ::google::protobuf::int32 ClientResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.ret_code)
  return ret_code_;
}
 void ClientResponse::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.ret_code)
}

// required int32 fresh_code = 3;
bool ClientResponse::has_fresh_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientResponse::set_has_fresh_code() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientResponse::clear_has_fresh_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientResponse::clear_fresh_code() {
  fresh_code_ = 0;
  clear_has_fresh_code();
}
 ::google::protobuf::int32 ClientResponse::fresh_code() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.fresh_code)
  return fresh_code_;
}
 void ClientResponse::set_fresh_code(::google::protobuf::int32 value) {
  set_has_fresh_code();
  fresh_code_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.fresh_code)
}

// required uint32 seq = 4;
bool ClientResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientResponse::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientResponse::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientResponse::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
 ::google::protobuf::uint32 ClientResponse::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.seq)
  return seq_;
}
 void ClientResponse::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.seq)
}

// required uint32 svr_seq = 5;
bool ClientResponse::has_svr_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientResponse::set_has_svr_seq() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientResponse::clear_has_svr_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientResponse::clear_svr_seq() {
  svr_seq_ = 0u;
  clear_has_svr_seq();
}
 ::google::protobuf::uint32 ClientResponse::svr_seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.svr_seq)
  return svr_seq_;
}
 void ClientResponse::set_svr_seq(::google::protobuf::uint32 value) {
  set_has_svr_seq();
  svr_seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.svr_seq)
}

// required uint32 game_time = 6;
bool ClientResponse::has_game_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientResponse::set_has_game_time() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientResponse::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientResponse::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
 ::google::protobuf::uint32 ClientResponse::game_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.game_time)
  return game_time_;
}
 void ClientResponse::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.game_time)
}

// required uint32 cost_time = 7;
bool ClientResponse::has_cost_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientResponse::set_has_cost_time() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientResponse::clear_has_cost_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientResponse::clear_cost_time() {
  cost_time_ = 0u;
  clear_has_cost_time();
}
 ::google::protobuf::uint32 ClientResponse::cost_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.cost_time)
  return cost_time_;
}
 void ClientResponse::set_cost_time(::google::protobuf::uint32 value) {
  set_has_cost_time();
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.cost_time)
}

// required uint32 uid = 8;
bool ClientResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 ClientResponse::uid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.uid)
  return uid_;
}
 void ClientResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.uid)
}

// required int32 sid = 9;
bool ClientResponse::has_sid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClientResponse::set_has_sid() {
  _has_bits_[0] |= 0x00000100u;
}
void ClientResponse::clear_has_sid() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClientResponse::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
 ::google::protobuf::int32 ClientResponse::sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.sid)
  return sid_;
}
 void ClientResponse::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.sid)
}

// repeated .client_netio_protocol.TableDomData table_dom_data = 10;
int ClientResponse::table_dom_data_size() const {
  return table_dom_data_.size();
}
void ClientResponse::clear_table_dom_data() {
  table_dom_data_.Clear();
}
const ::client_netio_protocol::TableDomData& ClientResponse::table_dom_data(int index) const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Get(index);
}
::client_netio_protocol::TableDomData* ClientResponse::mutable_table_dom_data(int index) {
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Mutable(index);
}
::client_netio_protocol::TableDomData* ClientResponse::add_table_dom_data() {
  // @@protoc_insertion_point(field_add:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >*
ClientResponse::mutable_table_dom_data() {
  // @@protoc_insertion_point(field_mutable_list:client_netio_protocol.ClientResponse.table_dom_data)
  return &table_dom_data_;
}
const ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >&
ClientResponse::table_dom_data() const {
  // @@protoc_insertion_point(field_list:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableDomData::kTableNameFieldNumber;
const int TableDomData::kUpdtTypeFieldNumber;
const int TableDomData::kSeqTypeFieldNumber;
const int TableDomData::kDomTypeFieldNumber;
const int TableDomData::kSeqFieldNumber;
const int TableDomData::kDomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableDomData::TableDomData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_netio_protocol.TableDomData)
}

void TableDomData::InitAsDefaultInstance() {
}

TableDomData::TableDomData(const TableDomData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_netio_protocol.TableDomData)
}

void TableDomData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updt_type_ = 0;
  seq_type_ = 0;
  dom_type_ = 0;
  seq_ = GOOGLE_LONGLONG(0);
  dom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableDomData::~TableDomData() {
  // @@protoc_insertion_point(destructor:client_netio_protocol.TableDomData)
  SharedDtor();
}

void TableDomData::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dom_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TableDomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDomData_descriptor_;
}

const TableDomData& TableDomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fnetio_2eproto();
  return *default_instance_;
}

TableDomData* TableDomData::default_instance_ = NULL;

TableDomData* TableDomData::New(::google::protobuf::Arena* arena) const {
  TableDomData* n = new TableDomData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableDomData::Clear() {
// @@protoc_insertion_point(message_clear_start:client_netio_protocol.TableDomData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TableDomData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TableDomData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(updt_type_, seq_);
    if (has_table_name()) {
      table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dom_type_ = 0;
    if (has_dom_data()) {
      dom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableDomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client_netio_protocol.TableDomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_netio_protocol.TableDomData.table_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_updt_type;
        break;
      }

      // required int32 updt_type = 2;
      case 2: {
        if (tag == 16) {
         parse_updt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updt_type_)));
          set_has_updt_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_type;
        break;
      }

      // required int32 seq_type = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_type_)));
          set_has_seq_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dom_type;
        break;
      }

      // required int32 dom_type = 4;
      case 4: {
        if (tag == 32) {
         parse_dom_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_type_)));
          set_has_dom_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // required int64 seq = 5;
      case 5: {
        if (tag == 40) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dom_data;
        break;
      }

      // required bytes dom_data = 6;
      case 6: {
        if (tag == 50) {
         parse_dom_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dom_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_netio_protocol.TableDomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_netio_protocol.TableDomData)
  return false;
#undef DO_
}

void TableDomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_netio_protocol.TableDomData)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_netio_protocol.TableDomData.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // required int32 updt_type = 2;
  if (has_updt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updt_type(), output);
  }

  // required int32 seq_type = 3;
  if (has_seq_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq_type(), output);
  }

  // required int32 dom_type = 4;
  if (has_dom_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dom_type(), output);
  }

  // required int64 seq = 5;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->seq(), output);
  }

  // required bytes dom_data = 6;
  if (has_dom_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->dom_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client_netio_protocol.TableDomData)
}

::google::protobuf::uint8* TableDomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_netio_protocol.TableDomData)
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_netio_protocol.TableDomData.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 updt_type = 2;
  if (has_updt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->updt_type(), target);
  }

  // required int32 seq_type = 3;
  if (has_seq_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq_type(), target);
  }

  // required int32 dom_type = 4;
  if (has_dom_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dom_type(), target);
  }

  // required int64 seq = 5;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->seq(), target);
  }

  // required bytes dom_data = 6;
  if (has_dom_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->dom_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_netio_protocol.TableDomData)
  return target;
}

int TableDomData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:client_netio_protocol.TableDomData)
  int total_size = 0;

  if (has_table_name()) {
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  if (has_updt_type()) {
    // required int32 updt_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updt_type());
  }

  if (has_seq_type()) {
    // required int32 seq_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq_type());
  }

  if (has_dom_type()) {
    // required int32 dom_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dom_type());
  }

  if (has_seq()) {
    // required int64 seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq());
  }

  if (has_dom_data()) {
    // required bytes dom_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dom_data());
  }

  return total_size;
}
int TableDomData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:client_netio_protocol.TableDomData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string table_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());

    // required int32 updt_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updt_type());

    // required int32 seq_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq_type());

    // required int32 dom_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dom_type());

    // required int64 seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq());

    // required bytes dom_data = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dom_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDomData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_netio_protocol.TableDomData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TableDomData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableDomData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_netio_protocol.TableDomData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client_netio_protocol.TableDomData)
    MergeFrom(*source);
  }
}

void TableDomData::MergeFrom(const TableDomData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_netio_protocol.TableDomData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (from.has_updt_type()) {
      set_updt_type(from.updt_type());
    }
    if (from.has_seq_type()) {
      set_seq_type(from.seq_type());
    }
    if (from.has_dom_type()) {
      set_dom_type(from.dom_type());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_dom_data()) {
      set_has_dom_data();
      dom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dom_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableDomData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_netio_protocol.TableDomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDomData::CopyFrom(const TableDomData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_netio_protocol.TableDomData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TableDomData::Swap(TableDomData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableDomData::InternalSwap(TableDomData* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(updt_type_, other->updt_type_);
  std::swap(seq_type_, other->seq_type_);
  std::swap(dom_type_, other->dom_type_);
  std::swap(seq_, other->seq_);
  dom_data_.Swap(&other->dom_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableDomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableDomData_descriptor_;
  metadata.reflection = TableDomData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableDomData

// required string table_name = 1;
bool TableDomData::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TableDomData::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TableDomData::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TableDomData::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
 const ::std::string& TableDomData::table_name() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableDomData::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.table_name)
}
 void TableDomData::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.TableDomData.table_name)
}
 void TableDomData::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.TableDomData.table_name)
}
 ::std::string* TableDomData::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.TableDomData.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableDomData::release_table_name() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.TableDomData.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableDomData::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.TableDomData.table_name)
}

// required int32 updt_type = 2;
bool TableDomData::has_updt_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableDomData::set_has_updt_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TableDomData::clear_has_updt_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableDomData::clear_updt_type() {
  updt_type_ = 0;
  clear_has_updt_type();
}
 ::google::protobuf::int32 TableDomData::updt_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.updt_type)
  return updt_type_;
}
 void TableDomData::set_updt_type(::google::protobuf::int32 value) {
  set_has_updt_type();
  updt_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.updt_type)
}

// required int32 seq_type = 3;
bool TableDomData::has_seq_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TableDomData::set_has_seq_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TableDomData::clear_has_seq_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TableDomData::clear_seq_type() {
  seq_type_ = 0;
  clear_has_seq_type();
}
 ::google::protobuf::int32 TableDomData::seq_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.seq_type)
  return seq_type_;
}
 void TableDomData::set_seq_type(::google::protobuf::int32 value) {
  set_has_seq_type();
  seq_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.seq_type)
}

// required int32 dom_type = 4;
bool TableDomData::has_dom_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TableDomData::set_has_dom_type() {
  _has_bits_[0] |= 0x00000008u;
}
void TableDomData::clear_has_dom_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void TableDomData::clear_dom_type() {
  dom_type_ = 0;
  clear_has_dom_type();
}
 ::google::protobuf::int32 TableDomData::dom_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.dom_type)
  return dom_type_;
}
 void TableDomData::set_dom_type(::google::protobuf::int32 value) {
  set_has_dom_type();
  dom_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.dom_type)
}

// required int64 seq = 5;
bool TableDomData::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TableDomData::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
void TableDomData::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
void TableDomData::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
  clear_has_seq();
}
 ::google::protobuf::int64 TableDomData::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.seq)
  return seq_;
}
 void TableDomData::set_seq(::google::protobuf::int64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.seq)
}

// required bytes dom_data = 6;
bool TableDomData::has_dom_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TableDomData::set_has_dom_data() {
  _has_bits_[0] |= 0x00000020u;
}
void TableDomData::clear_has_dom_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void TableDomData::clear_dom_data() {
  dom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dom_data();
}
 const ::std::string& TableDomData::dom_data() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.dom_data)
  return dom_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableDomData::set_dom_data(const ::std::string& value) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.dom_data)
}
 void TableDomData::set_dom_data(const char* value) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.TableDomData.dom_data)
}
 void TableDomData::set_dom_data(const void* value, size_t size) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.TableDomData.dom_data)
}
 ::std::string* TableDomData::mutable_dom_data() {
  set_has_dom_data();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.TableDomData.dom_data)
  return dom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableDomData::release_dom_data() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.TableDomData.dom_data)
  clear_has_dom_data();
  return dom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableDomData::set_allocated_dom_data(::std::string* dom_data) {
  if (dom_data != NULL) {
    set_has_dom_data();
  } else {
    clear_has_dom_data();
  }
  dom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dom_data);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.TableDomData.dom_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace client_netio_protocol

// @@protoc_insertion_point(global_scope)
