// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_netio.proto

#ifndef PROTOBUF_client_5fnetio_2eproto__INCLUDED
#define PROTOBUF_client_5fnetio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client_netio_protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_client_5fnetio_2eproto();
void protobuf_AssignDesc_client_5fnetio_2eproto();
void protobuf_ShutdownFile_client_5fnetio_2eproto();

class ClientRequest;
class ClientResponse;
class TableDomData;

// ===================================================================

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 service_type = 1;
  bool has_service_type() const;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  ::google::protobuf::int32 service_type() const;
  void set_service_type(::google::protobuf::int32 value);

  // required uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // required uint32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // required int32 sid = 5;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 5;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // required int32 aid = 6;
  bool has_aid() const;
  void clear_aid();
  static const int kAidFieldNumber = 6;
  ::google::protobuf::int32 aid() const;
  void set_aid(::google::protobuf::int32 value);

  // optional bytes req_url = 7;
  bool has_req_url() const;
  void clear_req_url();
  static const int kReqUrlFieldNumber = 7;
  const ::std::string& req_url() const;
  void set_req_url(const ::std::string& value);
  void set_req_url(const char* value);
  void set_req_url(const void* value, size_t size);
  ::std::string* mutable_req_url();
  ::std::string* release_req_url();
  void set_allocated_req_url(::std::string* req_url);

  // optional int32 m_scene = 8;
  bool has_m_scene() const;
  void clear_m_scene();
  static const int kMSceneFieldNumber = 8;
  ::google::protobuf::int32 m_scene() const;
  void set_m_scene(::google::protobuf::int32 value);

  // optional int32 m_sid = 9;
  bool has_m_sid() const;
  void clear_m_sid();
  static const int kMSidFieldNumber = 9;
  ::google::protobuf::int32 m_sid() const;
  void set_m_sid(::google::protobuf::int32 value);

  // optional int32 m_pos = 10;
  bool has_m_pos() const;
  void clear_m_pos();
  static const int kMPosFieldNumber = 10;
  ::google::protobuf::int32 m_pos() const;
  void set_m_pos(::google::protobuf::int32 value);

  // optional int32 cid = 11;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 11;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // optional int32 clv = 12;
  bool has_clv() const;
  void clear_clv();
  static const int kClvFieldNumber = 12;
  ::google::protobuf::int32 clv() const;
  void set_clv(::google::protobuf::int32 value);

  // optional string did = 13;
  bool has_did() const;
  void clear_did();
  static const int kDidFieldNumber = 13;
  const ::std::string& did() const;
  void set_did(const ::std::string& value);
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  ::std::string* mutable_did();
  ::std::string* release_did();
  void set_allocated_did(::std::string* did);

  // optional int64 login_time = 14;
  bool has_login_time() const;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 14;
  ::google::protobuf::int64 login_time() const;
  void set_login_time(::google::protobuf::int64 value);

  // optional string cmd = 15;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 15;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:client_netio_protocol.ClientRequest)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_req_url();
  inline void clear_has_req_url();
  inline void set_has_m_scene();
  inline void clear_has_m_scene();
  inline void set_has_m_sid();
  inline void clear_has_m_sid();
  inline void set_has_m_pos();
  inline void clear_has_m_pos();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_clv();
  inline void clear_has_clv();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 service_type_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 aid_;
  ::google::protobuf::internal::ArenaStringPtr req_url_;
  ::google::protobuf::int32 m_scene_;
  ::google::protobuf::int32 m_sid_;
  ::google::protobuf::int32 m_pos_;
  ::google::protobuf::int32 cid_;
  ::google::protobuf::internal::ArenaStringPtr did_;
  ::google::protobuf::int64 login_time_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::int32 clv_;
  friend void  protobuf_AddDesc_client_5fnetio_2eproto();
  friend void protobuf_AssignDesc_client_5fnetio_2eproto();
  friend void protobuf_ShutdownFile_client_5fnetio_2eproto();

  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientResponse : public ::google::protobuf::Message {
 public:
  ClientResponse();
  virtual ~ClientResponse();

  ClientResponse(const ClientResponse& from);

  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResponse& default_instance();

  void Swap(ClientResponse* other);

  // implements Message ----------------------------------------------

  inline ClientResponse* New() const { return New(NULL); }

  ClientResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 service_type = 1;
  bool has_service_type() const;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  ::google::protobuf::int32 service_type() const;
  void set_service_type(::google::protobuf::int32 value);

  // required int32 ret_code = 2;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // required int32 fresh_code = 3;
  bool has_fresh_code() const;
  void clear_fresh_code();
  static const int kFreshCodeFieldNumber = 3;
  ::google::protobuf::int32 fresh_code() const;
  void set_fresh_code(::google::protobuf::int32 value);

  // required uint32 seq = 4;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 4;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // required uint32 svr_seq = 5;
  bool has_svr_seq() const;
  void clear_svr_seq();
  static const int kSvrSeqFieldNumber = 5;
  ::google::protobuf::uint32 svr_seq() const;
  void set_svr_seq(::google::protobuf::uint32 value);

  // required uint32 game_time = 6;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 6;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // required uint32 cost_time = 7;
  bool has_cost_time() const;
  void clear_cost_time();
  static const int kCostTimeFieldNumber = 7;
  ::google::protobuf::uint32 cost_time() const;
  void set_cost_time(::google::protobuf::uint32 value);

  // required uint32 uid = 8;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 8;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // required int32 sid = 9;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 9;
  ::google::protobuf::int32 sid() const;
  void set_sid(::google::protobuf::int32 value);

  // repeated .client_netio_protocol.TableDomData table_dom_data = 10;
  int table_dom_data_size() const;
  void clear_table_dom_data();
  static const int kTableDomDataFieldNumber = 10;
  const ::client_netio_protocol::TableDomData& table_dom_data(int index) const;
  ::client_netio_protocol::TableDomData* mutable_table_dom_data(int index);
  ::client_netio_protocol::TableDomData* add_table_dom_data();
  ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >*
      mutable_table_dom_data();
  const ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >&
      table_dom_data() const;

  // @@protoc_insertion_point(class_scope:client_netio_protocol.ClientResponse)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_fresh_code();
  inline void clear_has_fresh_code();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_svr_seq();
  inline void clear_has_svr_seq();
  inline void set_has_game_time();
  inline void clear_has_game_time();
  inline void set_has_cost_time();
  inline void clear_has_cost_time();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sid();
  inline void clear_has_sid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 service_type_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 fresh_code_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 svr_seq_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 cost_time_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData > table_dom_data_;
  ::google::protobuf::int32 sid_;
  friend void  protobuf_AddDesc_client_5fnetio_2eproto();
  friend void protobuf_AssignDesc_client_5fnetio_2eproto();
  friend void protobuf_ShutdownFile_client_5fnetio_2eproto();

  void InitAsDefaultInstance();
  static ClientResponse* default_instance_;
};
// -------------------------------------------------------------------

class TableDomData : public ::google::protobuf::Message {
 public:
  TableDomData();
  virtual ~TableDomData();

  TableDomData(const TableDomData& from);

  inline TableDomData& operator=(const TableDomData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDomData& default_instance();

  void Swap(TableDomData* other);

  // implements Message ----------------------------------------------

  inline TableDomData* New() const { return New(NULL); }

  TableDomData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableDomData& from);
  void MergeFrom(const TableDomData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableDomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // required int32 updt_type = 2;
  bool has_updt_type() const;
  void clear_updt_type();
  static const int kUpdtTypeFieldNumber = 2;
  ::google::protobuf::int32 updt_type() const;
  void set_updt_type(::google::protobuf::int32 value);

  // required int32 seq_type = 3;
  bool has_seq_type() const;
  void clear_seq_type();
  static const int kSeqTypeFieldNumber = 3;
  ::google::protobuf::int32 seq_type() const;
  void set_seq_type(::google::protobuf::int32 value);

  // required int32 dom_type = 4;
  bool has_dom_type() const;
  void clear_dom_type();
  static const int kDomTypeFieldNumber = 4;
  ::google::protobuf::int32 dom_type() const;
  void set_dom_type(::google::protobuf::int32 value);

  // required int64 seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::google::protobuf::int64 seq() const;
  void set_seq(::google::protobuf::int64 value);

  // required bytes dom_data = 6;
  bool has_dom_data() const;
  void clear_dom_data();
  static const int kDomDataFieldNumber = 6;
  const ::std::string& dom_data() const;
  void set_dom_data(const ::std::string& value);
  void set_dom_data(const char* value);
  void set_dom_data(const void* value, size_t size);
  ::std::string* mutable_dom_data();
  ::std::string* release_dom_data();
  void set_allocated_dom_data(::std::string* dom_data);

  // @@protoc_insertion_point(class_scope:client_netio_protocol.TableDomData)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_updt_type();
  inline void clear_has_updt_type();
  inline void set_has_seq_type();
  inline void clear_has_seq_type();
  inline void set_has_dom_type();
  inline void clear_has_dom_type();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_dom_data();
  inline void clear_has_dom_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::int32 updt_type_;
  ::google::protobuf::int32 seq_type_;
  ::google::protobuf::int64 seq_;
  ::google::protobuf::internal::ArenaStringPtr dom_data_;
  ::google::protobuf::int32 dom_type_;
  friend void  protobuf_AddDesc_client_5fnetio_2eproto();
  friend void protobuf_AssignDesc_client_5fnetio_2eproto();
  friend void protobuf_ShutdownFile_client_5fnetio_2eproto();

  void InitAsDefaultInstance();
  static TableDomData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// required int32 service_type = 1;
inline bool ClientRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientRequest::clear_service_type() {
  service_type_ = 0;
  clear_has_service_type();
}
inline ::google::protobuf::int32 ClientRequest::service_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.service_type)
  return service_type_;
}
inline void ClientRequest::set_service_type(::google::protobuf::int32 value) {
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.service_type)
}

// required uint32 seq = 2;
inline bool ClientRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientRequest::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 ClientRequest::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.seq)
  return seq_;
}
inline void ClientRequest::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.seq)
}

// required uint32 time = 3;
inline bool ClientRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRequest::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ClientRequest::time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.time)
  return time_;
}
inline void ClientRequest::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.time)
}

// required uint32 uid = 4;
inline bool ClientRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ClientRequest::uid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.uid)
  return uid_;
}
inline void ClientRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.uid)
}

// required int32 sid = 5;
inline bool ClientRequest::has_sid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientRequest::set_has_sid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientRequest::clear_has_sid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientRequest::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 ClientRequest::sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.sid)
  return sid_;
}
inline void ClientRequest::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.sid)
}

// required int32 aid = 6;
inline bool ClientRequest::has_aid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientRequest::set_has_aid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientRequest::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
inline ::google::protobuf::int32 ClientRequest::aid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.aid)
  return aid_;
}
inline void ClientRequest::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.aid)
}

// optional bytes req_url = 7;
inline bool ClientRequest::has_req_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientRequest::set_has_req_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientRequest::clear_has_req_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientRequest::clear_req_url() {
  req_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_url();
}
inline const ::std::string& ClientRequest::req_url() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.req_url)
  return req_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_req_url(const ::std::string& value) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.req_url)
}
inline void ClientRequest::set_req_url(const char* value) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.ClientRequest.req_url)
}
inline void ClientRequest::set_req_url(const void* value, size_t size) {
  set_has_req_url();
  req_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.ClientRequest.req_url)
}
inline ::std::string* ClientRequest::mutable_req_url() {
  set_has_req_url();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientRequest.req_url)
  return req_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_req_url() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.ClientRequest.req_url)
  clear_has_req_url();
  return req_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_req_url(::std::string* req_url) {
  if (req_url != NULL) {
    set_has_req_url();
  } else {
    clear_has_req_url();
  }
  req_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_url);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.ClientRequest.req_url)
}

// optional int32 m_scene = 8;
inline bool ClientRequest::has_m_scene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientRequest::set_has_m_scene() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientRequest::clear_has_m_scene() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientRequest::clear_m_scene() {
  m_scene_ = 0;
  clear_has_m_scene();
}
inline ::google::protobuf::int32 ClientRequest::m_scene() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_scene)
  return m_scene_;
}
inline void ClientRequest::set_m_scene(::google::protobuf::int32 value) {
  set_has_m_scene();
  m_scene_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_scene)
}

// optional int32 m_sid = 9;
inline bool ClientRequest::has_m_sid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientRequest::set_has_m_sid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClientRequest::clear_has_m_sid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClientRequest::clear_m_sid() {
  m_sid_ = 0;
  clear_has_m_sid();
}
inline ::google::protobuf::int32 ClientRequest::m_sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_sid)
  return m_sid_;
}
inline void ClientRequest::set_m_sid(::google::protobuf::int32 value) {
  set_has_m_sid();
  m_sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_sid)
}

// optional int32 m_pos = 10;
inline bool ClientRequest::has_m_pos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClientRequest::set_has_m_pos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClientRequest::clear_has_m_pos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClientRequest::clear_m_pos() {
  m_pos_ = 0;
  clear_has_m_pos();
}
inline ::google::protobuf::int32 ClientRequest::m_pos() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.m_pos)
  return m_pos_;
}
inline void ClientRequest::set_m_pos(::google::protobuf::int32 value) {
  set_has_m_pos();
  m_pos_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.m_pos)
}

// optional int32 cid = 11;
inline bool ClientRequest::has_cid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClientRequest::set_has_cid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClientRequest::clear_has_cid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClientRequest::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 ClientRequest::cid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.cid)
  return cid_;
}
inline void ClientRequest::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.cid)
}

// optional int32 clv = 12;
inline bool ClientRequest::has_clv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ClientRequest::set_has_clv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ClientRequest::clear_has_clv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ClientRequest::clear_clv() {
  clv_ = 0;
  clear_has_clv();
}
inline ::google::protobuf::int32 ClientRequest::clv() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.clv)
  return clv_;
}
inline void ClientRequest::set_clv(::google::protobuf::int32 value) {
  set_has_clv();
  clv_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.clv)
}

// optional string did = 13;
inline bool ClientRequest::has_did() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ClientRequest::set_has_did() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ClientRequest::clear_has_did() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ClientRequest::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_did();
}
inline const ::std::string& ClientRequest::did() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.did)
  return did_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_did(const ::std::string& value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.did)
}
inline void ClientRequest::set_did(const char* value) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.ClientRequest.did)
}
inline void ClientRequest::set_did(const char* value, size_t size) {
  set_has_did();
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.ClientRequest.did)
}
inline ::std::string* ClientRequest::mutable_did() {
  set_has_did();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientRequest.did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_did() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.ClientRequest.did)
  clear_has_did();
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    set_has_did();
  } else {
    clear_has_did();
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.ClientRequest.did)
}

// optional int64 login_time = 14;
inline bool ClientRequest::has_login_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ClientRequest::set_has_login_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ClientRequest::clear_has_login_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ClientRequest::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
  clear_has_login_time();
}
inline ::google::protobuf::int64 ClientRequest::login_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.login_time)
  return login_time_;
}
inline void ClientRequest::set_login_time(::google::protobuf::int64 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.login_time)
}

// optional string cmd = 15;
inline bool ClientRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ClientRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ClientRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ClientRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
inline const ::std::string& ClientRequest::cmd() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientRequest.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientRequest.cmd)
}
inline void ClientRequest::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.ClientRequest.cmd)
}
inline void ClientRequest::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.ClientRequest.cmd)
}
inline ::std::string* ClientRequest::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.ClientRequest.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.ClientRequest.cmd)
}

// -------------------------------------------------------------------

// ClientResponse

// required int32 service_type = 1;
inline bool ClientResponse::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientResponse::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientResponse::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientResponse::clear_service_type() {
  service_type_ = 0;
  clear_has_service_type();
}
inline ::google::protobuf::int32 ClientResponse::service_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.service_type)
  return service_type_;
}
inline void ClientResponse::set_service_type(::google::protobuf::int32 value) {
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.service_type)
}

// required int32 ret_code = 2;
inline bool ClientResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 ClientResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.ret_code)
  return ret_code_;
}
inline void ClientResponse::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.ret_code)
}

// required int32 fresh_code = 3;
inline bool ClientResponse::has_fresh_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientResponse::set_has_fresh_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientResponse::clear_has_fresh_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientResponse::clear_fresh_code() {
  fresh_code_ = 0;
  clear_has_fresh_code();
}
inline ::google::protobuf::int32 ClientResponse::fresh_code() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.fresh_code)
  return fresh_code_;
}
inline void ClientResponse::set_fresh_code(::google::protobuf::int32 value) {
  set_has_fresh_code();
  fresh_code_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.fresh_code)
}

// required uint32 seq = 4;
inline bool ClientResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientResponse::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientResponse::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientResponse::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 ClientResponse::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.seq)
  return seq_;
}
inline void ClientResponse::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.seq)
}

// required uint32 svr_seq = 5;
inline bool ClientResponse::has_svr_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientResponse::set_has_svr_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientResponse::clear_has_svr_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientResponse::clear_svr_seq() {
  svr_seq_ = 0u;
  clear_has_svr_seq();
}
inline ::google::protobuf::uint32 ClientResponse::svr_seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.svr_seq)
  return svr_seq_;
}
inline void ClientResponse::set_svr_seq(::google::protobuf::uint32 value) {
  set_has_svr_seq();
  svr_seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.svr_seq)
}

// required uint32 game_time = 6;
inline bool ClientResponse::has_game_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientResponse::set_has_game_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientResponse::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientResponse::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
inline ::google::protobuf::uint32 ClientResponse::game_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.game_time)
  return game_time_;
}
inline void ClientResponse::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.game_time)
}

// required uint32 cost_time = 7;
inline bool ClientResponse::has_cost_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientResponse::set_has_cost_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientResponse::clear_has_cost_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientResponse::clear_cost_time() {
  cost_time_ = 0u;
  clear_has_cost_time();
}
inline ::google::protobuf::uint32 ClientResponse::cost_time() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.cost_time)
  return cost_time_;
}
inline void ClientResponse::set_cost_time(::google::protobuf::uint32 value) {
  set_has_cost_time();
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.cost_time)
}

// required uint32 uid = 8;
inline bool ClientResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ClientResponse::uid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.uid)
  return uid_;
}
inline void ClientResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.uid)
}

// required int32 sid = 9;
inline bool ClientResponse::has_sid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientResponse::set_has_sid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClientResponse::clear_has_sid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClientResponse::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 ClientResponse::sid() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.sid)
  return sid_;
}
inline void ClientResponse::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.ClientResponse.sid)
}

// repeated .client_netio_protocol.TableDomData table_dom_data = 10;
inline int ClientResponse::table_dom_data_size() const {
  return table_dom_data_.size();
}
inline void ClientResponse::clear_table_dom_data() {
  table_dom_data_.Clear();
}
inline const ::client_netio_protocol::TableDomData& ClientResponse::table_dom_data(int index) const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Get(index);
}
inline ::client_netio_protocol::TableDomData* ClientResponse::mutable_table_dom_data(int index) {
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Mutable(index);
}
inline ::client_netio_protocol::TableDomData* ClientResponse::add_table_dom_data() {
  // @@protoc_insertion_point(field_add:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >*
ClientResponse::mutable_table_dom_data() {
  // @@protoc_insertion_point(field_mutable_list:client_netio_protocol.ClientResponse.table_dom_data)
  return &table_dom_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::client_netio_protocol::TableDomData >&
ClientResponse::table_dom_data() const {
  // @@protoc_insertion_point(field_list:client_netio_protocol.ClientResponse.table_dom_data)
  return table_dom_data_;
}

// -------------------------------------------------------------------

// TableDomData

// required string table_name = 1;
inline bool TableDomData::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableDomData::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableDomData::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableDomData::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& TableDomData::table_name() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDomData::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.table_name)
}
inline void TableDomData::set_table_name(const char* value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.TableDomData.table_name)
}
inline void TableDomData::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.TableDomData.table_name)
}
inline ::std::string* TableDomData::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.TableDomData.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDomData::release_table_name() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.TableDomData.table_name)
  clear_has_table_name();
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDomData::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.TableDomData.table_name)
}

// required int32 updt_type = 2;
inline bool TableDomData::has_updt_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableDomData::set_has_updt_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableDomData::clear_has_updt_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableDomData::clear_updt_type() {
  updt_type_ = 0;
  clear_has_updt_type();
}
inline ::google::protobuf::int32 TableDomData::updt_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.updt_type)
  return updt_type_;
}
inline void TableDomData::set_updt_type(::google::protobuf::int32 value) {
  set_has_updt_type();
  updt_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.updt_type)
}

// required int32 seq_type = 3;
inline bool TableDomData::has_seq_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableDomData::set_has_seq_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableDomData::clear_has_seq_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableDomData::clear_seq_type() {
  seq_type_ = 0;
  clear_has_seq_type();
}
inline ::google::protobuf::int32 TableDomData::seq_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.seq_type)
  return seq_type_;
}
inline void TableDomData::set_seq_type(::google::protobuf::int32 value) {
  set_has_seq_type();
  seq_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.seq_type)
}

// required int32 dom_type = 4;
inline bool TableDomData::has_dom_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableDomData::set_has_dom_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableDomData::clear_has_dom_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableDomData::clear_dom_type() {
  dom_type_ = 0;
  clear_has_dom_type();
}
inline ::google::protobuf::int32 TableDomData::dom_type() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.dom_type)
  return dom_type_;
}
inline void TableDomData::set_dom_type(::google::protobuf::int32 value) {
  set_has_dom_type();
  dom_type_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.dom_type)
}

// required int64 seq = 5;
inline bool TableDomData::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableDomData::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableDomData::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableDomData::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
  clear_has_seq();
}
inline ::google::protobuf::int64 TableDomData::seq() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.seq)
  return seq_;
}
inline void TableDomData::set_seq(::google::protobuf::int64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.seq)
}

// required bytes dom_data = 6;
inline bool TableDomData::has_dom_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TableDomData::set_has_dom_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TableDomData::clear_has_dom_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TableDomData::clear_dom_data() {
  dom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dom_data();
}
inline const ::std::string& TableDomData::dom_data() const {
  // @@protoc_insertion_point(field_get:client_netio_protocol.TableDomData.dom_data)
  return dom_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDomData::set_dom_data(const ::std::string& value) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_netio_protocol.TableDomData.dom_data)
}
inline void TableDomData::set_dom_data(const char* value) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_netio_protocol.TableDomData.dom_data)
}
inline void TableDomData::set_dom_data(const void* value, size_t size) {
  set_has_dom_data();
  dom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_netio_protocol.TableDomData.dom_data)
}
inline ::std::string* TableDomData::mutable_dom_data() {
  set_has_dom_data();
  // @@protoc_insertion_point(field_mutable:client_netio_protocol.TableDomData.dom_data)
  return dom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDomData::release_dom_data() {
  // @@protoc_insertion_point(field_release:client_netio_protocol.TableDomData.dom_data)
  clear_has_dom_data();
  return dom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDomData::set_allocated_dom_data(::std::string* dom_data) {
  if (dom_data != NULL) {
    set_has_dom_data();
  } else {
    clear_has_dom_data();
  }
  dom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dom_data);
  // @@protoc_insertion_point(field_set_allocated:client_netio_protocol.TableDomData.dom_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_netio_protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fnetio_2eproto__INCLUDED
